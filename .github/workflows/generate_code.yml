# .github/workflows/generate_code.yml

name: Generate and Display SystemVerilog Code with Gemini

# ワークフローを手動で実行できるようにするトリガー
on:
  workflow_dispatch:

jobs:
  generate-and-display-code:
    runs-on: ubuntu-latest

    steps:
      # 1. リポジトリのコードをチェックアウトする
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 仕様書(specification.md)の内容を読み込む
      - name: Read specification file
        id: spec_file
        run: echo "content=$(cat docs/specification.md | sed 's/\"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')" >> $GITHUB_OUTPUT

      # 3. Gemini APIにリクエストを送信してコードを生成する
      - name: Generate Code via Gemini API
        id: gemini_request
        run: |
          response_file=$(mktemp)
          
          prompt_body='{
            "contents": [{
              "parts": [{
                "text": "You are an expert SystemVerilog engineer. Your task is to generate multiple code files based on the following specification. Respond ONLY with the raw source code for the requested files. Each file content should be enclosed in a unique markdown code block with the filename specified in the language identifier (e.g., ```systemverilog:top_tb.sv). Do not add any extra explanations, introductions, or conclusions. Strictly follow the file structure and coding guidelines from the specification. \n\nHere is the specification:\n\n${{ steps.spec_file.outputs.content }}"
              }]
            }]
          }'

          curl -s \
            -H "Content-Type: application/json" \
            -d "${prompt_body}" \
            -X POST "[https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=$](https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=$){{ secrets.GEMINI_API_KEY }}" \
            > ${response_file}

          if ! grep -q "text" ${response_file}; then
            echo "::error::API request failed. Response:"
            cat ${response_file}
            exit 1
          fi

          cat ${response_file} | jq -r '.candidates[0].content.parts[0].text' | \
          awk '
            /^```/{
              if (in_block) {
                close(filename);
                in_block=0;
              } else {
                filename=gensub(/.*:(.*)/, "\\1", "g", $1);
                gsub(/`/, "", filename);
                in_block=1;
              }
              next;
            }
            in_block { print > filename }
          '
        
      # 4. (変更点) 生成されたファイルの一覧と内容をログに表示する
      - name: Display Generated Files
        run: |
          echo "✅ Code generation complete. The following files were created:"
          ls -1 --color=never *.sv *.txt
          
          echo -e "\n--- Displaying file contents ---"
          for file in $(ls *.sv *.txt); do
            echo -e "\n\n--- 📜 Content of $file ---\n"
            cat "$file"
          done
          echo -e "\n--- End of file contents ---"